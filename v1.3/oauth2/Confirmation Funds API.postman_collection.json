{
	"info": {
		"_postman_id": "722d1129-25bf-43ca-a055-b58a5125d4b6",
		"name": "Confirmation Funds API",
		"description": "Confirmation Funds API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Sandbox",
			"item": [
				{
					"name": "Create Sandbox",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Client-Id",
								"type": "text",
								"value": "{{client_id}}"
							},
							{
								"key": "Request-Id",
								"type": "text",
								"value": "{{$guid}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"header\": {\n        \"ID\": \"{{$guid}}\",\n        \"application\": \"{{client_id}}\"\n    },\n    \"payload\": {\n        \"sandboxId\": \"{{sandbox_id}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{root_url}}/sandbox",
							"host": [
								"{{root_url}}"
							],
							"path": [
								"sandbox"
							]
						},
						"description": "A Sandbox with default data is created. Simply call by providing an “id” as your sandbox id and naming it almost anything you like."
					},
					"response": []
				},
				{
					"name": "Export Sandbox",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Client-Id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "Request-Id",
								"value": "{{$guid}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{root_url}}/sandbox/{{sandbox_id}}",
							"host": [
								"{{root_url}}"
							],
							"path": [
								"sandbox",
								"{{sandbox_id}}"
							]
						},
						"description": "Export a sandbox"
					},
					"response": []
				},
				{
					"name": "Import Sandbox",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Client-Id",
								"type": "text",
								"value": "{{client_id}}"
							},
							{
								"key": "Request-Id",
								"type": "text",
								"value": "{{$guid}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"header\": {\n        \"ID\": \"{{$guid}}\",\n        \"application\": \"{{client_id}}\"\n    },\n    \"payload\": {\n        \"sanboxId\": \"{{sandbox_id}}\",\n        \"version\": 1,\n        \"users\": [\n            {\n                \"accounts\": [\n                    {\n                        \"account\": {\n                            \"accountType\": \"3000\",\n                            \"overdraftLimit\": null,\n                            \"numberOfMandates\": null,\n                            \"serialNo\": null,\n                            \"account\": \"67890123456\",\n                            \"iban\": \"GR5301106780000067890123456\",\n                            \"currency\": \"EUR\",\n                            \"alias\": \"Account 1\",\n                            \"product\": null,\n                            \"ledgerBalance\": 50000,\n                            \"availableBalance\": 500000,\n                            \"newMoneyBalance\": 0,\n                            \"flag\": null,\n                            \"allowConnect\": null,\n                            \"allowDebit\": null,\n                            \"allowCredit\": null,\n                            \"indicators\": null,\n                            \"ledgerAccount\": null,\n                            \"isOwnAccount\": true,\n                            \"features\": {\n                                \"statement\": true,\n                                \"otherInfo\": true,\n                                \"mandates\": true,\n                                \"cheques\": true,\n                                \"transfer\": true,\n                                \"rates\": true,\n                                \"beneficiaries\": true\n                            }\n                        },\n                        \"transactions\": [\n                            {\n                                \"serialNum\": \"1\",\n                                \"date\": \"2019-05-17T10:51:15.2934065Z\",\n                                \"branch\": null,\n                                \"trans\": \"20\",\n                                \"amount\": -25,\n                                \"currency\": \"070\",\n                                \"amountEquivalent\": 0,\n                                \"creditDebit\": \"Debit\",\n                                \"valeur\": \"2019-05-17T10:51:15.2934065Z\",\n                                \"description\": \"Check deposit Federer\",\n                                \"accountingBalance\": 500000,\n                                \"reference\": \"12345678901234567890\",\n                                \"externalSystem\": \"RNB\",\n                                \"relatedAccount\": \"GR5301106780000067890123456\",\n                                \"relatedName\": \"ΠΑΠΑΔΟΠΟΥΛΟΣ ΓΕΩΡΓΙΟΣ\",\n                                \"timestamp\": null\n                            },\n                            {\n                                \"serialNum\": \"2\",\n                                \"date\": \"2019-05-16T10:51:15.2934065Z\",\n                                \"branch\": null,\n                                \"trans\": \"64\",\n                                \"amount\": 450.86,\n                                \"currency\": \"070\",\n                                \"amountEquivalent\": 0,\n                                \"creditDebit\": \"Credit\",\n                                \"valeur\": \"2019-05-16T10:51:15.2934065Z\",\n                                \"description\": \"Fund Transfer 1\",\n                                \"accountingBalance\": 499549.14,\n                                \"reference\": \"12345678901234567891\",\n                                \"externalSystem\": \"RNB\",\n                                \"relatedAccount\": \"GR5301106780000067890123456\",\n                                \"relatedName\": \"ΠΑΠΑΔΟΠΟΥΛΟΣ ΓΕΩΡΓΙΟΣ\",\n                                \"timestamp\": null\n                            },\n                            {\n                                \"serialNum\": \"3\",\n                                \"date\": \"2019-05-15T10:51:15.2934065Z\",\n                                \"branch\": null,\n                                \"trans\": \"64\",\n                                \"amount\": 400.86,\n                                \"currency\": \"070\",\n                                \"amountEquivalent\": 0,\n                                \"creditDebit\": \"Credit\",\n                                \"valeur\": \"2019-05-15T10:51:15.2934065Z\",\n                                \"description\": \"Fund Transfer 2\",\n                                \"accountingBalance\": 499599.14,\n                                \"reference\": \"12345678901234567892\",\n                                \"externalSystem\": \"RNB\",\n                                \"relatedAccount\": \"GR5301106780000067890123456\",\n                                \"relatedName\": \"ΠΑΠΑΔΟΠΟΥΛΟΣ ΓΕΩΡΓΙΟΣ\",\n                                \"timestamp\": null\n                            }\n                        ],\n                        \"deferred\": [],\n                        \"pending\": [],\n                        \"beneficiaries\": [\n                            {\n                                \"name\": \"ΠΑΠΑΔΟΠΟΥΛΟΣ ΓΕΩΡΓΙΟΣ\",\n                                \"order\": \"1\"\n                            },\n                            {\n                                \"name\": \"ΠΑΠΠΑΣ ΝΙΚΟΛΑΟΣ\",\n                                \"order\": \"2\"\n                            }\n                        ],\n                        \"details\": {\n                            \"account\": \"67890123456\",\n                            \"iban\": \"GR5301106780000067890123456\",\n                            \"accountType\": \"3000\",\n                            \"currency\": \"EUR\",\n                            \"alias\": \"Account 1\",\n                            \"product\": null,\n                            \"ledgerBalance\": 50000,\n                            \"availableBalance\": 500000,\n                            \"createDate\": \"2019-05-17T10:51:15.2913998Z\",\n                            \"lastTransactionDate\": \"2019-05-17T10:51:15.2913998Z\",\n                            \"interestRate\": 0,\n                            \"interestAccrued\": 0,\n                            \"interestPeriod\": \"0\",\n                            \"chequeReservation\": 0,\n                            \"deptReservation\": 0,\n                            \"overdraftLimit\": 0,\n                            \"excessLimitAmount\": 0,\n                            \"availableLimitAmount\": 0,\n                            \"freeChequeAmnt\": 0,\n                            \"expirationDate\": \"2019-05-17T10:51:15.2913998Z\",\n                            \"interestScale\": \"1000\",\n                            \"irisAccount\": null,\n                            \"irisBalance\": 0,\n                            \"accType\": null,\n                            \"allowConnect\": \"1\",\n                            \"allowDebit\": \"1\",\n                            \"allowCredit\": \"11\",\n                            \"indicators\": null,\n                            \"ledgerAccount\": null,\n                            \"isOwnAccount\": true,\n                            \"features\": {\n                                \"statement\": true,\n                                \"otherInfo\": true,\n                                \"mandates\": true,\n                                \"cheques\": true,\n                                \"transfer\": true,\n                                \"rates\": true,\n                                \"beneficiaries\": true\n                            },\n                            \"newMoneyBalance\": 0,\n                            \"mandatesNumber\": null\n                        },\n                        \"rates\": [\n                            {\n                                \"from\": 0,\n                                \"to\": 100000,\n                                \"rate\": 0.03\n                            }\n                        ]\n                    },\n                    {\n                        \"account\": {\n                            \"accountType\": \"20\",\n                            \"overdraftLimit\": null,\n                            \"numberOfMandates\": null,\n                            \"serialNo\": null,\n                            \"account\": \"67890123458\",\n                            \"iban\": \"GR9601106780000067890123458\",\n                            \"currency\": \"EUR\",\n                            \"alias\": \"Account 2\",\n                            \"product\": null,\n                            \"ledgerBalance\": 10000,\n                            \"availableBalance\": 500000,\n                            \"newMoneyBalance\": 0,\n                            \"flag\": null,\n                            \"allowConnect\": null,\n                            \"allowDebit\": null,\n                            \"allowCredit\": null,\n                            \"indicators\": null,\n                            \"ledgerAccount\": null,\n                            \"isOwnAccount\": true,\n                            \"features\": {\n                                \"statement\": true,\n                                \"otherInfo\": true,\n                                \"mandates\": true,\n                                \"cheques\": true,\n                                \"transfer\": true,\n                                \"rates\": true,\n                                \"beneficiaries\": true\n                            }\n                        },\n                        \"transactions\": [],\n                        \"deferred\": [],\n                        \"pending\": [],\n                        \"beneficiaries\": [\n                            {\n                                \"name\": \"ΒΑΣΙΛΕΙΟΥ ΜΑΡΙΑ\",\n                                \"order\": \"1\"\n                            }\n                        ],\n                        \"details\": {\n                            \"account\": \"67890123458\",\n                            \"iban\": \"GR9601106780000067890123458\",\n                            \"accountType\": \"20\",\n                            \"currency\": \"EUR\",\n                            \"alias\": \"Account 2\",\n                            \"product\": null,\n                            \"ledgerBalance\": 10000,\n                            \"availableBalance\": 500000,\n                            \"createDate\": \"2019-05-17T10:51:15.2913998Z\",\n                            \"lastTransactionDate\": \"2019-05-17T10:51:15.2913998Z\",\n                            \"interestRate\": 0,\n                            \"interestAccrued\": 0,\n                            \"interestPeriod\": \"0\",\n                            \"chequeReservation\": 0,\n                            \"deptReservation\": 0,\n                            \"overdraftLimit\": 0,\n                            \"excessLimitAmount\": 0,\n                            \"availableLimitAmount\": 0,\n                            \"freeChequeAmnt\": 0,\n                            \"expirationDate\": \"2019-05-17T10:51:15.2913998Z\",\n                            \"interestScale\": \"1000\",\n                            \"irisAccount\": null,\n                            \"irisBalance\": 0,\n                            \"accType\": null,\n                            \"allowConnect\": \"1\",\n                            \"allowDebit\": \"1\",\n                            \"allowCredit\": \"11\",\n                            \"indicators\": null,\n                            \"ledgerAccount\": null,\n                            \"isOwnAccount\": true,\n                            \"features\": {\n                                \"statement\": true,\n                                \"otherInfo\": true,\n                                \"mandates\": true,\n                                \"cheques\": true,\n                                \"transfer\": true,\n                                \"rates\": true,\n                                \"beneficiaries\": true\n                            },\n                            \"newMoneyBalance\": 0,\n                            \"mandatesNumber\": null\n                        },\n                        \"rates\": []\n                    },\n                    {\n                        \"account\": {\n                            \"accountType\": \"3000\",\n                            \"overdraftLimit\": null,\n                            \"numberOfMandates\": null,\n                            \"serialNo\": null,\n                            \"account\": \"12332112332\",\n                            \"iban\": \"GR9601106780000012332112332\",\n                            \"currency\": \"USD\",\n                            \"alias\": \"Account 3\",\n                            \"product\": null,\n                            \"ledgerBalance\": 500000,\n                            \"availableBalance\": 500000,\n                            \"newMoneyBalance\": 0,\n                            \"flag\": null,\n                            \"allowConnect\": null,\n                            \"allowDebit\": null,\n                            \"allowCredit\": null,\n                            \"indicators\": null,\n                            \"ledgerAccount\": null,\n                            \"isOwnAccount\": true,\n                            \"features\": {\n                                \"statement\": true,\n                                \"otherInfo\": true,\n                                \"mandates\": true,\n                                \"cheques\": true,\n                                \"transfer\": true,\n                                \"rates\": true,\n                                \"beneficiaries\": true\n                            }\n                        },\n                        \"transactions\": [\n                            {\n                                \"serialNum\": \"1\",\n                                \"date\": \"2019-05-17T10:51:15.2934065Z\",\n                                \"branch\": null,\n                                \"trans\": \"20\",\n                                \"amount\": -25,\n                                \"currency\": \"002\",\n                                \"amountEquivalent\": 0,\n                                \"creditDebit\": \"Debit\",\n                                \"valeur\": \"2019-05-17T10:51:15.2934065Z\",\n                                \"description\": \"Check deposit Federer\",\n                                \"accountingBalance\": 500000,\n                                \"reference\": \"12345678901234567880\",\n                                \"externalSystem\": \"RNB\",\n                                \"relatedAccount\": \"GR9601106780000012332112332\",\n                                \"relatedName\": \"ΓΕΩΡΓΙΟΥ ΓΙΩΡΓΟΣ\",\n                                \"timestamp\": null\n                            },\n                            {\n                                \"serialNum\": \"2\",\n                                \"date\": \"2019-05-16T10:51:15.2934065Z\",\n                                \"branch\": null,\n                                \"trans\": \"64\",\n                                \"amount\": 450.86,\n                                \"currency\": \"002\",\n                                \"amountEquivalent\": 0,\n                                \"creditDebit\": \"Credit\",\n                                \"valeur\": \"2019-05-16T10:51:15.2934065Z\",\n                                \"description\": \"Fund Transfer 1\",\n                                \"accountingBalance\": 499549.14,\n                                \"reference\": \"12345678901234567881\",\n                                \"externalSystem\": \"RNB\",\n                                \"relatedAccount\": \"GR9601106780000012332112332\",\n                                \"relatedName\": \"ΓΕΩΡΓΙΟΥ ΓΙΩΡΓΟΣ\",\n                                \"timestamp\": null\n                            },\n                            {\n                                \"serialNum\": \"3\",\n                                \"date\": \"2019-05-15T10:51:15.2934065Z\",\n                                \"branch\": null,\n                                \"trans\": \"64\",\n                                \"amount\": 400.86,\n                                \"currency\": \"002\",\n                                \"amountEquivalent\": 0,\n                                \"creditDebit\": \"Credit\",\n                                \"valeur\": \"2019-05-15T10:51:15.2934065Z\",\n                                \"description\": \"Fund Transfer 2\",\n                                \"accountingBalance\": 499599.14,\n                                \"reference\": \"12345678901234567882\",\n                                \"externalSystem\": \"RNB\",\n                                \"relatedAccount\": \"GR9601106780000012332112332\",\n                                \"relatedName\": \"ΓΕΩΡΓΙΟΥ ΓΙΩΡΓΟΣ\",\n                                \"timestamp\": null\n                            }\n                        ],\n                        \"deferred\": [],\n                        \"pending\": [],\n                        \"beneficiaries\": [\n                            {\n                                \"name\": \"ΓΕΩΡΓΙΟΥ ΓΙΩΡΓΟΣ\",\n                                \"order\": \"1\"\n                            }\n                        ],\n                        \"details\": {\n                            \"account\": \"12332112332\",\n                            \"iban\": \"GR9601106780000012332112332\",\n                            \"accountType\": \"3000\",\n                            \"currency\": \"USD\",\n                            \"alias\": \"Account 3\",\n                            \"product\": null,\n                            \"ledgerBalance\": 500000,\n                            \"availableBalance\": 500000,\n                            \"createDate\": \"2019-05-17T10:51:15.2913998Z\",\n                            \"lastTransactionDate\": \"2019-05-17T10:51:15.2913998Z\",\n                            \"interestRate\": 0,\n                            \"interestAccrued\": 0,\n                            \"interestPeriod\": \"0\",\n                            \"chequeReservation\": 0,\n                            \"deptReservation\": 0,\n                            \"overdraftLimit\": 0,\n                            \"excessLimitAmount\": 0,\n                            \"availableLimitAmount\": 0,\n                            \"freeChequeAmnt\": 0,\n                            \"expirationDate\": \"2019-05-17T10:51:15.2913998Z\",\n                            \"interestScale\": \"1000\",\n                            \"irisAccount\": null,\n                            \"irisBalance\": 0,\n                            \"accType\": null,\n                            \"allowConnect\": \"1\",\n                            \"allowDebit\": \"1\",\n                            \"allowCredit\": \"11\",\n                            \"indicators\": null,\n                            \"ledgerAccount\": null,\n                            \"isOwnAccount\": true,\n                            \"features\": {\n                                \"statement\": true,\n                                \"otherInfo\": true,\n                                \"mandates\": true,\n                                \"cheques\": true,\n                                \"transfer\": true,\n                                \"rates\": true,\n                                \"beneficiaries\": true\n                            },\n                            \"newMoneyBalance\": 0,\n                            \"mandatesNumber\": null\n                        },\n                        \"rates\": [\n                            {\n                                \"from\": 0,\n                                \"to\": 100000,\n                                \"rate\": 0.03\n                            }\n                        ]\n                    }\n                ],\n                \"userId\": \"voutsasva\",\n                \"mobilePhoneNumber\": \"6945900874\"\n            },\n            {\n                \"accounts\": [\n                    {\n                        \"account\": {\n                            \"accountType\": \"3000\",\n                            \"overdraftLimit\": null,\n                            \"numberOfMandates\": null,\n                            \"serialNo\": null,\n                            \"account\": \"67890123456\",\n                            \"iban\": \"GR5301106780000067890123456\",\n                            \"currency\": \"EUR\",\n                            \"alias\": \"Account 1\",\n                            \"product\": null,\n                            \"ledgerBalance\": 50000,\n                            \"availableBalance\": 500000,\n                            \"newMoneyBalance\": 0,\n                            \"flag\": null,\n                            \"allowConnect\": null,\n                            \"allowDebit\": null,\n                            \"allowCredit\": null,\n                            \"indicators\": null,\n                            \"ledgerAccount\": null,\n                            \"isOwnAccount\": true,\n                            \"features\": {\n                                \"statement\": true,\n                                \"otherInfo\": true,\n                                \"mandates\": true,\n                                \"cheques\": true,\n                                \"transfer\": true,\n                                \"rates\": true,\n                                \"beneficiaries\": true\n                            }\n                        },\n                        \"transactions\": [\n                            {\n                                \"serialNum\": \"1\",\n                                \"date\": \"2019-05-17T10:51:15.2934065Z\",\n                                \"branch\": null,\n                                \"trans\": \"20\",\n                                \"amount\": -25,\n                                \"currency\": \"070\",\n                                \"amountEquivalent\": 0,\n                                \"creditDebit\": \"Debit\",\n                                \"valeur\": \"2019-05-17T10:51:15.2934065Z\",\n                                \"description\": \"Check deposit Federer\",\n                                \"accountingBalance\": 500000,\n                                \"reference\": \"12345678901234567890\",\n                                \"externalSystem\": \"RNB\",\n                                \"relatedAccount\": \"GR5301106780000067890123456\",\n                                \"relatedName\": \"ΠΑΠΑΔΟΠΟΥΛΟΣ ΓΕΩΡΓΙΟΣ\",\n                                \"timestamp\": null\n                            },\n                            {\n                                \"serialNum\": \"2\",\n                                \"date\": \"2019-05-16T10:51:15.2934065Z\",\n                                \"branch\": null,\n                                \"trans\": \"64\",\n                                \"amount\": 450.86,\n                                \"currency\": \"070\",\n                                \"amountEquivalent\": 0,\n                                \"creditDebit\": \"Credit\",\n                                \"valeur\": \"2019-05-16T10:51:15.2934065Z\",\n                                \"description\": \"Fund Transfer 1\",\n                                \"accountingBalance\": 499549.14,\n                                \"reference\": \"12345678901234567891\",\n                                \"externalSystem\": \"RNB\",\n                                \"relatedAccount\": \"GR5301106780000067890123456\",\n                                \"relatedName\": \"ΠΑΠΑΔΟΠΟΥΛΟΣ ΓΕΩΡΓΙΟΣ\",\n                                \"timestamp\": null\n                            },\n                            {\n                                \"serialNum\": \"3\",\n                                \"date\": \"2019-05-15T10:51:15.2934065Z\",\n                                \"branch\": null,\n                                \"trans\": \"64\",\n                                \"amount\": 400.86,\n                                \"currency\": \"070\",\n                                \"amountEquivalent\": 0,\n                                \"creditDebit\": \"Credit\",\n                                \"valeur\": \"2019-05-15T10:51:15.2934065Z\",\n                                \"description\": \"Fund Transfer 2\",\n                                \"accountingBalance\": 499599.14,\n                                \"reference\": \"12345678901234567892\",\n                                \"externalSystem\": \"RNB\",\n                                \"relatedAccount\": \"GR5301106780000067890123456\",\n                                \"relatedName\": \"ΠΑΠΑΔΟΠΟΥΛΟΣ ΓΕΩΡΓΙΟΣ\",\n                                \"timestamp\": null\n                            }\n                        ],\n                        \"deferred\": [],\n                        \"pending\": [],\n                        \"beneficiaries\": [\n                            {\n                                \"name\": \"ΠΑΠΑΔΟΠΟΥΛΟΣ ΓΕΩΡΓΙΟΣ\",\n                                \"order\": \"1\"\n                            },\n                            {\n                                \"name\": \"ΠΑΠΠΑΣ ΝΙΚΟΛΑΟΣ\",\n                                \"order\": \"2\"\n                            }\n                        ],\n                        \"details\": {\n                            \"account\": \"67890123456\",\n                            \"iban\": \"GR5301106780000067890123456\",\n                            \"accountType\": \"3000\",\n                            \"currency\": \"EUR\",\n                            \"alias\": \"Account 1\",\n                            \"product\": null,\n                            \"ledgerBalance\": 50000,\n                            \"availableBalance\": 500000,\n                            \"createDate\": \"2019-05-17T10:51:15.2913998Z\",\n                            \"lastTransactionDate\": \"2019-05-17T10:51:15.2913998Z\",\n                            \"interestRate\": 0,\n                            \"interestAccrued\": 0,\n                            \"interestPeriod\": \"0\",\n                            \"chequeReservation\": 0,\n                            \"deptReservation\": 0,\n                            \"overdraftLimit\": 0,\n                            \"excessLimitAmount\": 0,\n                            \"availableLimitAmount\": 0,\n                            \"freeChequeAmnt\": 0,\n                            \"expirationDate\": \"2019-05-17T10:51:15.2913998Z\",\n                            \"interestScale\": \"1000\",\n                            \"irisAccount\": null,\n                            \"irisBalance\": 0,\n                            \"accType\": null,\n                            \"allowConnect\": \"1\",\n                            \"allowDebit\": \"1\",\n                            \"allowCredit\": \"11\",\n                            \"indicators\": null,\n                            \"ledgerAccount\": null,\n                            \"isOwnAccount\": true,\n                            \"features\": {\n                                \"statement\": true,\n                                \"otherInfo\": true,\n                                \"mandates\": true,\n                                \"cheques\": true,\n                                \"transfer\": true,\n                                \"rates\": true,\n                                \"beneficiaries\": true\n                            },\n                            \"newMoneyBalance\": 0,\n                            \"mandatesNumber\": null\n                        },\n                        \"rates\": [\n                            {\n                                \"from\": 0,\n                                \"to\": 100000,\n                                \"rate\": 0.03\n                            }\n                        ]\n                    },\n                    {\n                        \"account\": {\n                            \"accountType\": \"20\",\n                            \"overdraftLimit\": null,\n                            \"numberOfMandates\": null,\n                            \"serialNo\": null,\n                            \"account\": \"67890123458\",\n                            \"iban\": \"GR9601106780000067890123458\",\n                            \"currency\": \"EUR\",\n                            \"alias\": \"Account 2\",\n                            \"product\": null,\n                            \"ledgerBalance\": 10000,\n                            \"availableBalance\": 500000,\n                            \"newMoneyBalance\": 0,\n                            \"flag\": null,\n                            \"allowConnect\": null,\n                            \"allowDebit\": null,\n                            \"allowCredit\": null,\n                            \"indicators\": null,\n                            \"ledgerAccount\": null,\n                            \"isOwnAccount\": true,\n                            \"features\": {\n                                \"statement\": true,\n                                \"otherInfo\": true,\n                                \"mandates\": true,\n                                \"cheques\": true,\n                                \"transfer\": true,\n                                \"rates\": true,\n                                \"beneficiaries\": true\n                            }\n                        },\n                        \"transactions\": [],\n                        \"deferred\": [],\n                        \"pending\": [],\n                        \"beneficiaries\": [\n                            {\n                                \"name\": \"ΒΑΣΙΛΕΙΟΥ ΜΑΡΙΑ\",\n                                \"order\": \"1\"\n                            }\n                        ],\n                        \"details\": {\n                            \"account\": \"67890123458\",\n                            \"iban\": \"GR9601106780000067890123458\",\n                            \"accountType\": \"20\",\n                            \"currency\": \"EUR\",\n                            \"alias\": \"Account 2\",\n                            \"product\": null,\n                            \"ledgerBalance\": 10000,\n                            \"availableBalance\": 500000,\n                            \"createDate\": \"2019-05-17T10:51:15.2913998Z\",\n                            \"lastTransactionDate\": \"2019-05-17T10:51:15.2913998Z\",\n                            \"interestRate\": 0,\n                            \"interestAccrued\": 0,\n                            \"interestPeriod\": \"0\",\n                            \"chequeReservation\": 0,\n                            \"deptReservation\": 0,\n                            \"overdraftLimit\": 0,\n                            \"excessLimitAmount\": 0,\n                            \"availableLimitAmount\": 0,\n                            \"freeChequeAmnt\": 0,\n                            \"expirationDate\": \"2019-05-17T10:51:15.2913998Z\",\n                            \"interestScale\": \"1000\",\n                            \"irisAccount\": null,\n                            \"irisBalance\": 0,\n                            \"accType\": null,\n                            \"allowConnect\": \"1\",\n                            \"allowDebit\": \"1\",\n                            \"allowCredit\": \"11\",\n                            \"indicators\": null,\n                            \"ledgerAccount\": null,\n                            \"isOwnAccount\": true,\n                            \"features\": {\n                                \"statement\": true,\n                                \"otherInfo\": true,\n                                \"mandates\": true,\n                                \"cheques\": true,\n                                \"transfer\": true,\n                                \"rates\": true,\n                                \"beneficiaries\": true\n                            },\n                            \"newMoneyBalance\": 0,\n                            \"mandatesNumber\": null\n                        },\n                        \"rates\": []\n                    },\n                    {\n                        \"account\": {\n                            \"accountType\": \"3000\",\n                            \"overdraftLimit\": null,\n                            \"numberOfMandates\": null,\n                            \"serialNo\": null,\n                            \"account\": \"12332112332\",\n                            \"iban\": \"GR9601106780000012332112332\",\n                            \"currency\": \"USD\",\n                            \"alias\": \"Account 3\",\n                            \"product\": null,\n                            \"ledgerBalance\": 500000,\n                            \"availableBalance\": 500000,\n                            \"newMoneyBalance\": 0,\n                            \"flag\": null,\n                            \"allowConnect\": null,\n                            \"allowDebit\": null,\n                            \"allowCredit\": null,\n                            \"indicators\": null,\n                            \"ledgerAccount\": null,\n                            \"isOwnAccount\": true,\n                            \"features\": {\n                                \"statement\": true,\n                                \"otherInfo\": true,\n                                \"mandates\": true,\n                                \"cheques\": true,\n                                \"transfer\": true,\n                                \"rates\": true,\n                                \"beneficiaries\": true\n                            }\n                        },\n                        \"transactions\": [\n                            {\n                                \"serialNum\": \"1\",\n                                \"date\": \"2019-05-17T10:51:15.2934065Z\",\n                                \"branch\": null,\n                                \"trans\": \"20\",\n                                \"amount\": -25,\n                                \"currency\": \"002\",\n                                \"amountEquivalent\": 0,\n                                \"creditDebit\": \"Debit\",\n                                \"valeur\": \"2019-05-17T10:51:15.2934065Z\",\n                                \"description\": \"Check deposit Federer\",\n                                \"accountingBalance\": 500000,\n                                \"reference\": \"12345678901234567880\",\n                                \"externalSystem\": \"RNB\",\n                                \"relatedAccount\": \"GR9601106780000012332112332\",\n                                \"relatedName\": \"ΓΕΩΡΓΙΟΥ ΓΙΩΡΓΟΣ\",\n                                \"timestamp\": null\n                            },\n                            {\n                                \"serialNum\": \"2\",\n                                \"date\": \"2019-05-16T10:51:15.2934065Z\",\n                                \"branch\": null,\n                                \"trans\": \"64\",\n                                \"amount\": 450.86,\n                                \"currency\": \"002\",\n                                \"amountEquivalent\": 0,\n                                \"creditDebit\": \"Credit\",\n                                \"valeur\": \"2019-05-16T10:51:15.2934065Z\",\n                                \"description\": \"Fund Transfer 1\",\n                                \"accountingBalance\": 499549.14,\n                                \"reference\": \"12345678901234567881\",\n                                \"externalSystem\": \"RNB\",\n                                \"relatedAccount\": \"GR9601106780000012332112332\",\n                                \"relatedName\": \"ΓΕΩΡΓΙΟΥ ΓΙΩΡΓΟΣ\",\n                                \"timestamp\": null\n                            },\n                            {\n                                \"serialNum\": \"3\",\n                                \"date\": \"2019-05-15T10:51:15.2934065Z\",\n                                \"branch\": null,\n                                \"trans\": \"64\",\n                                \"amount\": 400.86,\n                                \"currency\": \"002\",\n                                \"amountEquivalent\": 0,\n                                \"creditDebit\": \"Credit\",\n                                \"valeur\": \"2019-05-15T10:51:15.2934065Z\",\n                                \"description\": \"Fund Transfer 2\",\n                                \"accountingBalance\": 499599.14,\n                                \"reference\": \"12345678901234567882\",\n                                \"externalSystem\": \"RNB\",\n                                \"relatedAccount\": \"GR9601106780000012332112332\",\n                                \"relatedName\": \"ΓΕΩΡΓΙΟΥ ΓΙΩΡΓΟΣ\",\n                                \"timestamp\": null\n                            }\n                        ],\n                        \"deferred\": [],\n                        \"pending\": [],\n                        \"beneficiaries\": [\n                            {\n                                \"name\": \"ΓΕΩΡΓΙΟΥ ΓΙΩΡΓΟΣ\",\n                                \"order\": \"1\"\n                            }\n                        ],\n                        \"details\": {\n                            \"account\": \"12332112332\",\n                            \"iban\": \"GR9601106780000012332112332\",\n                            \"accountType\": \"3000\",\n                            \"currency\": \"USD\",\n                            \"alias\": \"Account 3\",\n                            \"product\": null,\n                            \"ledgerBalance\": 500000,\n                            \"availableBalance\": 500000,\n                            \"createDate\": \"2019-05-17T10:51:15.2913998Z\",\n                            \"lastTransactionDate\": \"2019-05-17T10:51:15.2913998Z\",\n                            \"interestRate\": 0,\n                            \"interestAccrued\": 0,\n                            \"interestPeriod\": \"0\",\n                            \"chequeReservation\": 0,\n                            \"deptReservation\": 0,\n                            \"overdraftLimit\": 0,\n                            \"excessLimitAmount\": 0,\n                            \"availableLimitAmount\": 0,\n                            \"freeChequeAmnt\": 0,\n                            \"expirationDate\": \"2019-05-17T10:51:15.2913998Z\",\n                            \"interestScale\": \"1000\",\n                            \"irisAccount\": null,\n                            \"irisBalance\": 0,\n                            \"accType\": null,\n                            \"allowConnect\": \"1\",\n                            \"allowDebit\": \"1\",\n                            \"allowCredit\": \"11\",\n                            \"indicators\": null,\n                            \"ledgerAccount\": null,\n                            \"isOwnAccount\": true,\n                            \"features\": {\n                                \"statement\": true,\n                                \"otherInfo\": true,\n                                \"mandates\": true,\n                                \"cheques\": true,\n                                \"transfer\": true,\n                                \"rates\": true,\n                                \"beneficiaries\": true\n                            },\n                            \"newMoneyBalance\": 0,\n                            \"mandatesNumber\": null\n                        },\n                        \"rates\": [\n                            {\n                                \"from\": 0,\n                                \"to\": 100000,\n                                \"rate\": 0.03\n                            }\n                        ]\n                    }\n                ],\n                \"userId\": \"CORPORATION\",\n                \"mobilePhoneNumber\": \"\"\n            }\n        ],\n        \"consentApplicationIds\": [\n            \"72f01708-be1e-4567-926e-8c87d03ca551\"\n        ],\n        \"consents\": []\n    },\n    \"exception\": null,\n    \"messages\": null,\n    \"executionTime\": 0\n}"
						},
						"url": {
							"raw": "{{root_url}}/sandbox/{{sandbox_id}}",
							"host": [
								"{{root_url}}"
							],
							"path": [
								"sandbox",
								"{{sandbox_id}}"
							]
						},
						"description": "Import a sandbox"
					},
					"response": []
				},
				{
					"name": "Delete Sandbox",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Client-Id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "Request-Id",
								"value": "{{$guid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{root_url}}/sandbox/{{sandbox_id}}",
							"host": [
								"{{root_url}}"
							],
							"path": [
								"sandbox",
								"{{sandbox_id}}"
							]
						},
						"description": "Delete a sandbox"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ae36cb81-e2ee-4fbe-a603-160faddc339b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4728e107-b6fd-4d80-8358-244dce10dc3c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Consent",
			"item": [
				{
					"name": "Generate consent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "24629237-d3c8-40c0-8d46-74fb9cabe8f6",
								"exec": [
									"{//loading private key",
									"//console.log(\"Now private key must be placed in plain text base64 starting and ending with '-----' lines\");",
									"//console.log(\"Additionally u can use KEYUTIL for safe key storage.\" );",
									"var privateKey = pm.environment.get(\"privatekey\");",
									"//loading public key  and addit to header ",
									"//console.log(\" additionally u can use KEYUTIL for safe certificate storage now is in plain text\");",
									"var publicKey = pm.environment.get(\"publiccertificate\").replace('-----BEGIN CERTIFICATE-----','').replace('-----END CERTIFICATE-----','').replace(/(?:\\r\\n|\\r|\\n)/g, '');",
									"pm.environment.set(\"TPP-Signature-Certificate\", publicKey);",
									"var Property = require('postman-collection').Property;",
									"",
									"",
									"var runit =  function(){",
									"    //loading RSA JWT library",
									"    var navigator = {};",
									"    var window = {};",
									"    eval(postman.getGlobalVariable(\"RSAJS\"));",
									"    //console.log(\" now u can use KJUR as a rsa library\");",
									"    ",
									"    //prepare head",
									"    var oHeader = {\"alg\" : \"RS256\",\"typ\" : \"JWT\"};",
									"    var sHeader = JSON.stringify(oHeader);",
									"    ",
									"    //prepare pody",
									"    //var oData = {dsa:\"dsa\"};",
									"    var oRaw = pm.request.body.raw ",
									"    var oData = JSON.parse(Property.replaceSubstitutions(pm.request.body.raw , pm.variables.toObject()));",
									"    ",
									"    var sPayload = JSON.stringify(oData);",
									"    //var sPayload = pm.request.body.raw;",
									"    //console.log(sPayload);",
									"    ",
									"    //Creating Signature",
									"    var sJWT = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, privateKey);",
									"    //console.log(\"JWT:\" +  sJWT);",
									"    var detachedJWT = sJWT.split(\".\",1)+\"..\" + sJWT.split(\".\")[2];",
									"    //console.log(\"detached JWT:\" +  detachedJWT);",
									"    pm.environment.set(\"Signature\", detachedJWT);",
									"}",
									"var newguid = (function() {",
									"  function s4() {",
									"    return Math.floor((1 + Math.random()) * 0x10000)",
									"               .toString(16)",
									"               .substring(1);",
									"  }",
									"  return function() {",
									"    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +",
									"           s4() + '-' + s4() + s4() + s4();",
									"  };",
									"})();",
									"",
									"//Change Request Guid on body",
									"pm.environment.set(\"request_guid\",newguid())",
									"//download forgeJS from web and set varible",
									"if(!pm.globals.has(\"RSAJS\")){",
									"        pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/jsrsasign/8.0.12/jsrsasign-all-min.js\", function (err, res) {",
									"        if (err) {",
									"            //console.log(err);",
									"        }",
									"        else {",
									"            pm.globals.set(\"RSAJS\", res.text());",
									"            runit();",
									"        }",
									"})}",
									"else {runit(); }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a953042d-578f-451e-a0bf-670421d63746",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var consentid = jsonData.payload.consentId\r",
									"pm.environment.set(\"Consent-Id\", consentid);\r",
									"\r",
									"var sandboxid = pm.environment.get(\"sandbox_id\");\r",
									"\r",
									"console.log(\"https://my.nbg.gr/sandbox.consent/account.info/authorize?consent_id=\" + consentid + \"&sandbox_id=\" + sandboxid + \"&redirect_uri=https://www.google.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "{{accept}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "sandbox_id",
								"value": "{{sandbox_id}}",
								"type": "text"
							},
							{
								"key": "Client-Id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "Request-Id",
								"value": "{{request_guid}}",
								"type": "text"
							},
							{
								"key": "X-Certificate-Check",
								"value": "{{X-Certificate-Check}}",
								"type": "text"
							},
							{
								"key": "TPP-Signature-Certificate",
								"value": "{{TPP-Signature-Certificate}}",
								"type": "text"
							},
							{
								"key": "Signature",
								"value": "{{Signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"header\": {\n        \"ID\": \"{{request_guid}}\",\n        \"application\": \"{{client_id}}\"\n    },\n    \"payload\": {\n        \"applicationId\": \"{{consent_application_Id}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{root_url}}/consents/request-access",
							"host": [
								"{{root_url}}"
							],
							"path": [
								"consents",
								"request-access"
							]
						},
						"description": "Generates a consentId that must be used when the user visits the Consent UI to give his/her consent, using client credential authorisation flow."
					},
					"response": []
				},
				{
					"name": "Get consent information",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "373650a8-cb69-4634-9813-54644f56e07e",
								"exec": [
									"{//loading private key",
									"console.log(\"Now private key must be placed in plain text base64 starting and ending with '-----' lines\");",
									"console.log(\"Additionally u can use KEYUTIL for safe key storage.\" );",
									"var privateKey = pm.environment.get(\"privatekey\");",
									"//loading public key  and addit to header ",
									"console.log(\" additionally u can use KEYUTIL for safe certificate storage now is in plain text\");",
									"var publicKey = pm.environment.get(\"publiccertificate\").replace('-----BEGIN CERTIFICATE-----','').replace('-----END CERTIFICATE-----','').replace(/(?:\\r\\n|\\r|\\n)/g, '');",
									"pm.environment.set(\"TPP-Signature-Certificate\", publicKey);",
									"var Property = require('postman-collection').Property;",
									"",
									"",
									"var runit =  function(){",
									"    //loading RSA JWT library",
									"    var navigator = {};",
									"    var window = {};",
									"    eval(postman.getGlobalVariable(\"RSAJS\"));",
									"    console.log(\" now u can use KJUR as a rsa library\");",
									"    ",
									"    //prepare head",
									"    var oHeader = {\"alg\" : \"RS256\",\"typ\" : \"JWT\"};",
									"    var sHeader = JSON.stringify(oHeader);",
									"    ",
									"    //prepare pody",
									"    //var oData = {dsa:\"dsa\"};",
									"    var oRaw = pm.request.body.raw ",
									"    var oData = JSON.parse(Property.replaceSubstitutions(pm.request.body.raw , pm.variables.toObject()));",
									"    ",
									"    var sPayload = JSON.stringify(oData);",
									"    //var sPayload = pm.request.body.raw;",
									"    console.log(sPayload);",
									"    ",
									"    //Creating Signature",
									"    var sJWT = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, privateKey);",
									"    console.log(\"JWT:\" +  sJWT);",
									"    var detachedJWT = sJWT.split(\".\",1)+\"..\" + sJWT.split(\".\")[2];",
									"    console.log(\"detached JWT:\" +  detachedJWT);",
									"    pm.environment.set(\"Signature\", detachedJWT);",
									"}",
									"var newguid = (function() {",
									"  function s4() {",
									"    return Math.floor((1 + Math.random()) * 0x10000)",
									"               .toString(16)",
									"               .substring(1);",
									"  }",
									"  return function() {",
									"    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +",
									"           s4() + '-' + s4() + s4() + s4();",
									"  };",
									"})();",
									"",
									"//Change Request Guid on body",
									"pm.environment.set(\"request_guid\",newguid())",
									"//download forgeJS from web and set varible",
									"if(!pm.globals.has(\"RSAJS\")){",
									"        pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/jsrsasign/8.0.12/jsrsasign-all-min.js\", function (err, res) {",
									"        if (err) {",
									"            console.log(err);}",
									"        else {",
									"            pm.globals.set(\"RSAJS\", res.text());",
									"            runit();",
									"        }",
									"})}",
									"else {runit(); }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "{{accept}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "sandbox_id",
								"type": "text",
								"value": "{{sandbox_id}}"
							},
							{
								"key": "Client-Id",
								"type": "text",
								"value": "{{client_id}}"
							},
							{
								"key": "Request-Id",
								"type": "text",
								"value": "{{request_guid}}"
							},
							{
								"key": "X-Certificate-Check",
								"value": "{{X-Certificate-Check}}",
								"type": "text"
							},
							{
								"key": "TPP-Signature-Certificate",
								"value": "{{TPP-Signature-Certificate}}",
								"type": "text"
							},
							{
								"key": "Signature",
								"value": "{{Signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"header\": {\n        \"ID\": \"{{request_guid}}\",\n        \"application\": \"{{client_id}}\"\n    },\n    \"payload\": {\n\t\t\"userId\": \"{{user_id}}\",\n        \"applicationId\": \"{{consent_application_Id}}\",\n        \"consentId\": \"{{Consent-Id}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{root_url}}/consents/info",
							"host": [
								"{{root_url}}"
							],
							"path": [
								"consents",
								"info"
							]
						},
						"description": "Retrieves the consent information of a user's consent."
					},
					"response": []
				},
				{
					"name": "Delete consent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c3c5c729-413e-4f35-9a59-a52a7f9662b8",
								"exec": [
									"{//loading private key",
									"console.log(\"Now private key must be placed in plain text base64 starting and ending with '-----' lines\");",
									"console.log(\"Additionally u can use KEYUTIL for safe key storage.\" );",
									"var privateKey = pm.environment.get(\"privatekey\");",
									"//loading public key  and addit to header ",
									"console.log(\" additionally u can use KEYUTIL for safe certificate storage now is in plain text\");",
									"var publicKey = pm.environment.get(\"publiccertificate\").replace('-----BEGIN CERTIFICATE-----','').replace('-----END CERTIFICATE-----','').replace(/(?:\\r\\n|\\r|\\n)/g, '');",
									"pm.environment.set(\"TPP-Signature-Certificate\", publicKey);",
									"var Property = require('postman-collection').Property;",
									"",
									"",
									"var runit =  function(){",
									"    //loading RSA JWT library",
									"    var navigator = {};",
									"    var window = {};",
									"    eval(postman.getGlobalVariable(\"RSAJS\"));",
									"    console.log(\" now u can use KJUR as a rsa library\");",
									"    ",
									"    //prepare head",
									"    var oHeader = {\"alg\" : \"RS256\",\"typ\" : \"JWT\"};",
									"    var sHeader = JSON.stringify(oHeader);",
									"    ",
									"    //prepare pody",
									"    //var oData = {dsa:\"dsa\"};",
									"    var oRaw = pm.request.body.raw ",
									"    var oData = JSON.parse(Property.replaceSubstitutions(pm.request.body.raw , pm.variables.toObject()));",
									"    ",
									"    var sPayload = JSON.stringify(oData);",
									"    //var sPayload = pm.request.body.raw;",
									"    console.log(sPayload);",
									"    ",
									"    //Creating Signature",
									"    var sJWT = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, privateKey);",
									"    console.log(\"JWT:\" +  sJWT);",
									"    var detachedJWT = sJWT.split(\".\",1)+\"..\" + sJWT.split(\".\")[2];",
									"    console.log(\"detached JWT:\" +  detachedJWT);",
									"    pm.environment.set(\"Signature\", detachedJWT);",
									"}",
									"var newguid = (function() {",
									"  function s4() {",
									"    return Math.floor((1 + Math.random()) * 0x10000)",
									"               .toString(16)",
									"               .substring(1);",
									"  }",
									"  return function() {",
									"    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +",
									"           s4() + '-' + s4() + s4() + s4();",
									"  };",
									"})();",
									"",
									"//Change Request Guid on body",
									"pm.environment.set(\"request_guid\",newguid())",
									"//download forgeJS from web and set varible",
									"if(!pm.globals.has(\"RSAJS\")){",
									"        pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/jsrsasign/8.0.12/jsrsasign-all-min.js\", function (err, res) {",
									"        if (err) {",
									"            console.log(err);}",
									"        else {",
									"            pm.globals.set(\"RSAJS\", res.text());",
									"            runit();",
									"        }",
									"})}",
									"else {runit(); }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "{{accept}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "sandbox_id",
								"type": "text",
								"value": "{{sandbox_id}}"
							},
							{
								"key": "Client-Id",
								"type": "text",
								"value": "{{client_id}}"
							},
							{
								"key": "Request-Id",
								"type": "text",
								"value": "{{request_guid}}"
							},
							{
								"key": "X-Certificate-Check",
								"value": "{{X-Certificate-Check}}",
								"type": "text"
							},
							{
								"key": "TPP-Signature-Certificate",
								"value": "{{TPP-Signature-Certificate}}",
								"type": "text"
							},
							{
								"key": "Signature",
								"value": "{{Signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"header\": {\n        \"ID\": \"{{request_guid}}\",\n        \"application\": \"{{client_id}}\"\n    },\n    \"payload\": {\n        \"tanNumber\": \"smsotp\",\n        \"userId\": \"{{user_id}}\",\n        \"consentId\": \"{{Consent-Id}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{root_url}}/consents/delete",
							"host": [
								"{{root_url}}"
							],
							"path": [
								"consents",
								"delete"
							]
						},
						"description": "Deletes a user's consent."
					},
					"response": []
				}
			]
		},
		{
			"name": "Funds Availability",
			"item": [
				{
					"name": "Availability of Funds",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "71a97b62-e6b9-4ae1-929e-86caa5b853a6",
								"exec": [
									"{//loading private key",
									"console.log(\"Now private key must be placed in plain text base64 starting and ending with '-----' lines\");",
									"console.log(\"Additionally u can use KEYUTIL for safe key storage.\" );",
									"var privateKey = pm.environment.get(\"privatekey\");",
									"//loading public key  and addit to header ",
									"console.log(\" additionally u can use KEYUTIL for safe certificate storage now is in plain text\");",
									"var publicKey = pm.environment.get(\"publiccertificate\").replace('-----BEGIN CERTIFICATE-----','').replace('-----END CERTIFICATE-----','').replace(/(?:\\r\\n|\\r|\\n)/g, '');",
									"pm.environment.set(\"TPP-Signature-Certificate\", publicKey);",
									"var Property = require('postman-collection').Property;",
									"",
									"",
									"var runit =  function(){",
									"    //loading RSA JWT library",
									"    var navigator = {};",
									"    var window = {};",
									"    eval(postman.getGlobalVariable(\"RSAJS\"));",
									"    console.log(\" now u can use KJUR as a rsa library\");",
									"    ",
									"    //prepare head",
									"    var oHeader = {\"alg\" : \"RS256\",\"typ\" : \"JWT\"};",
									"    var sHeader = JSON.stringify(oHeader);",
									"    ",
									"    //prepare pody",
									"    //var oData = {dsa:\"dsa\"};",
									"    var oRaw = pm.request.body.raw ",
									"    var oData = JSON.parse(Property.replaceSubstitutions(pm.request.body.raw , pm.variables.toObject()));",
									"    ",
									"    var sPayload = JSON.stringify(oData);",
									"    //var sPayload = pm.request.body.raw;",
									"    console.log(sPayload);",
									"    ",
									"    //Creating Signature",
									"    var sJWT = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, privateKey);",
									"    console.log(\"JWT:\" +  sJWT);",
									"    var detachedJWT = sJWT.split(\".\",1)+\"..\" + sJWT.split(\".\")[2];",
									"    console.log(\"detached JWT:\" +  detachedJWT);",
									"    pm.environment.set(\"Signature\", detachedJWT);",
									"}",
									"var newguid = (function() {",
									"  function s4() {",
									"    return Math.floor((1 + Math.random()) * 0x10000)",
									"               .toString(16)",
									"               .substring(1);",
									"  }",
									"  return function() {",
									"    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +",
									"           s4() + '-' + s4() + s4() + s4();",
									"  };",
									"})();",
									"",
									"//Change Request Guid on body",
									"pm.environment.set(\"request_guid\",newguid())",
									"//download forgeJS from web and set varible",
									"if(!pm.globals.has(\"RSAJS\")){",
									"        pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/jsrsasign/8.0.12/jsrsasign-all-min.js\", function (err, res) {",
									"        if (err) {",
									"            console.log(err);}",
									"        else {",
									"            pm.globals.set(\"RSAJS\", res.text());",
									"            runit();",
									"        }",
									"})}",
									"else {runit(); }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "{{accept}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "sandbox_id",
								"type": "text",
								"value": "{{sandbox_id}}"
							},
							{
								"key": "Client-Id",
								"type": "text",
								"value": "{{client_id}}"
							},
							{
								"key": "Request-Id",
								"type": "text",
								"value": "{{request_guid}}"
							},
							{
								"key": "Consent-Id",
								"type": "text",
								"value": "{{Consent-Id}}"
							},
							{
								"key": "X-Consent-Check",
								"type": "text",
								"value": "{{X-Consent-Check}}"
							},
							{
								"key": "X-Certificate-Check",
								"value": "{{X-Certificate-Check}}",
								"type": "text"
							},
							{
								"key": "TPP-Signature-Certificate",
								"value": "{{TPP-Signature-Certificate}}",
								"type": "text"
							},
							{
								"key": "Signature",
								"value": "{{Signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"header\": {\n        \"ID\": \"{{request_guid}}\",\n        \"application\": \"{{client_id}}\"\n    },\n    \"payload\": {\n        \"userId\": \"{{user_id}}\",\n        \"iban\": \"{{iban}}\",\n        \"payee\": \"payee name\",\n        \"amount\": {\n            \"amount\": 1,\n            \"currency\": \"EUR\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{root_url}}/funds-confirmations/check-availability",
							"host": [
								"{{root_url}}"
							],
							"path": [
								"funds-confirmations",
								"check-availability"
							]
						},
						"description": "The availability of funds is determined by providing the account's details and the corresponding amount in question."
					},
					"response": []
				}
			],
			"description": "Folder for account",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "42a45814-79ae-40d0-adec-435092d45636",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "122e689c-c50b-4f00-8f84-f548d732c8cd",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "User Details",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ab3656be-750f-4a91-a3b5-4a07b503e913",
								"exec": [
									"{//loading private key",
									"//console.log(\"Now private key must be placed in plain text base64 starting and ending with '-----' lines\");",
									"//console.log(\"Additionally u can use KEYUTIL for safe key storage.\" );",
									"var privateKey = pm.environment.get(\"privatekey\");",
									"//loading public key  and addit to header ",
									"//console.log(\" additionally u can use KEYUTIL for safe certificate storage now is in plain text\");",
									"var publicKey = pm.environment.get(\"publiccertificate\").replace('-----BEGIN CERTIFICATE-----','').replace('-----END CERTIFICATE-----','').replace(/(?:\\r\\n|\\r|\\n)/g, '');",
									"pm.environment.set(\"TPP-Signature-Certificate\", publicKey);",
									"var Property = require('postman-collection').Property;",
									"",
									"",
									"var runit =  function(){",
									"    //loading RSA JWT library",
									"    var navigator = {};",
									"    var window = {};",
									"    eval(postman.getGlobalVariable(\"RSAJS\"));",
									"    //console.log(\" now u can use KJUR as a rsa library\");",
									"    ",
									"    //prepare head",
									"    var oHeader = {\"alg\" : \"RS256\",\"typ\" : \"JWT\"};",
									"    var sHeader = JSON.stringify(oHeader);",
									"    ",
									"    //prepare pody",
									"    //var oData = {dsa:\"dsa\"};",
									"    var oRaw = pm.request.body.raw ",
									"    var oData = JSON.parse(Property.replaceSubstitutions(pm.request.body.raw , pm.variables.toObject()));",
									"    ",
									"    var sPayload = JSON.stringify(oData);",
									"    //var sPayload = pm.request.body.raw;",
									"    //console.log(sPayload);",
									"    ",
									"    //Creating Signature",
									"    var sJWT = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, privateKey);",
									"    //console.log(\"JWT:\" +  sJWT);",
									"    var detachedJWT = sJWT.split(\".\",1)+\"..\" + sJWT.split(\".\")[2];",
									"    //console.log(\"detached JWT:\" +  detachedJWT);",
									"    pm.environment.set(\"Signature\", detachedJWT);",
									"}",
									"var newguid = (function() {",
									"  function s4() {",
									"    return Math.floor((1 + Math.random()) * 0x10000)",
									"               .toString(16)",
									"               .substring(1);",
									"  }",
									"  return function() {",
									"    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +",
									"           s4() + '-' + s4() + s4() + s4();",
									"  };",
									"})();",
									"",
									"//Change Request Guid on body",
									"pm.environment.set(\"request_guid\",newguid())",
									"//download forgeJS from web and set varible",
									"if(!pm.globals.has(\"RSAJS\")){",
									"        pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/jsrsasign/8.0.12/jsrsasign-all-min.js\", function (err, res) {",
									"        if (err) {",
									"            //console.log(err);",
									"        }",
									"        else {",
									"            pm.globals.set(\"RSAJS\", res.text());",
									"            runit();",
									"        }",
									"})}",
									"else {runit(); }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "{{accept}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "sandbox_id",
								"value": "{{sandbox_id}}"
							},
							{
								"key": "Client-Id",
								"type": "text",
								"value": "{{client_id}}"
							},
							{
								"key": "Request-Id",
								"type": "text",
								"value": "{{$guid}}"
							},
							{
								"key": "X-Certificate-Check",
								"value": "{{X-Certificate-Check}}",
								"type": "text"
							},
							{
								"key": "TPP-Signature-Certificate",
								"value": "{{TPP-Signature-Certificate}}",
								"type": "text"
							},
							{
								"key": "Signature",
								"value": "{{Signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"header\": {\n        \"ID\": \"{{request_guid}}\",\n        \"application\": \"{{client_id}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{root_url}}/user/current",
							"host": [
								"{{root_url}}"
							],
							"path": [
								"user",
								"current"
							]
						},
						"description": "Info about the logged in user."
					},
					"response": []
				}
			],
			"description": "Folder for user"
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "accessToken",
				"value": "9091f77191323a2915cf0c0ae32a6c8ea01e147a38d397015a8de9a894e26a8f",
				"type": "string"
			},
			{
				"key": "tokenType",
				"value": "Bearer",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "b5ffe7fa-15dd-480c-a358-a9267160e20f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "f7aa329f-96fb-4df0-b87b-096cea03b3ff",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}